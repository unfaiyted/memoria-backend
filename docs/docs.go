// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/config": {
            "get": {
                "description": "Retrieve current application configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "Get configuration",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ConfigResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ConfigResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update application configuration settings in app.config.json",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "Update configuration",
                "parameters": [
                    {
                        "description": "Configuration settings",
                        "name": "configuration",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Configuration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ConfigResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ConfigResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ConfigResponse"
                        }
                    }
                }
            }
        },
        "/config/reset": {
            "post": {
                "description": "Reset app.config.json to default values",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "Reset configuration",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ConfigResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ConfigResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Get all users in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "List users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.UserResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new user in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Get a user by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a user's information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a user by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.ConfigResponse": {
            "description": "Configuration response wrapper",
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Configuration"
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "models.Configuration": {
            "description": "Complete application configuration settings",
            "type": "object",
            "properties": {
                "app": {
                    "description": "App contains core application settings",
                    "type": "object",
                    "required": [
                        "apiBaseURL",
                        "appURL",
                        "environment",
                        "logLevel",
                        "maxPageSize",
                        "name"
                    ],
                    "properties": {
                        "apiBaseURL": {
                            "type": "string",
                            "example": "http://localhost:8080"
                        },
                        "appURL": {
                            "type": "string",
                            "example": "http://localhost:3000"
                        },
                        "environment": {
                            "type": "string",
                            "enum": [
                                "development",
                                "staging",
                                "production"
                            ],
                            "example": "development"
                        },
                        "logLevel": {
                            "type": "string",
                            "enum": [
                                "debug",
                                "info",
                                "warn",
                                "error"
                            ],
                            "example": "info"
                        },
                        "maxPageSize": {
                            "type": "integer",
                            "maximum": 1000,
                            "minimum": 1,
                            "example": 100
                        },
                        "name": {
                            "type": "string",
                            "example": "Listarr"
                        }
                    }
                },
                "auth": {
                    "description": "Auth contains authentication settings",
                    "type": "object",
                    "required": [
                        "jwtSecret",
                        "sessionTimeout",
                        "tokenExpiration"
                    ],
                    "properties": {
                        "allowedOrigins": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "example": [
                                "http://localhost:3000"
                            ]
                        },
                        "enable2FA": {
                            "type": "boolean",
                            "example": false
                        },
                        "enableLocal": {
                            "type": "boolean",
                            "example": true
                        },
                        "jwtSecret": {
                            "type": "string",
                            "example": "your-secret-key"
                        },
                        "sessionTimeout": {
                            "type": "integer",
                            "minimum": 1,
                            "example": 60
                        },
                        "tokenExpiration": {
                            "type": "integer",
                            "minimum": 1,
                            "example": 24
                        }
                    }
                },
                "db": {
                    "description": "Database contains database connection settings",
                    "type": "object",
                    "required": [
                        "host",
                        "maxConns",
                        "name",
                        "password",
                        "port",
                        "timeout",
                        "user"
                    ],
                    "properties": {
                        "host": {
                            "type": "string",
                            "example": "localhost"
                        },
                        "maxConns": {
                            "type": "integer",
                            "minimum": 1,
                            "example": 20
                        },
                        "name": {
                            "type": "string",
                            "example": "listarr"
                        },
                        "password": {
                            "type": "string",
                            "example": "yourpassword"
                        },
                        "port": {
                            "type": "string",
                            "example": "5432"
                        },
                        "timeout": {
                            "type": "integer",
                            "minimum": 1,
                            "example": 30
                        },
                        "user": {
                            "type": "string",
                            "example": "postgres_user"
                        }
                    }
                },
                "http": {
                    "description": "HTTP contains HTTP server configuration",
                    "type": "object",
                    "required": [
                        "idleTimeout",
                        "port",
                        "readTimeout",
                        "writeTimeout"
                    ],
                    "properties": {
                        "enableSSL": {
                            "type": "boolean",
                            "example": false
                        },
                        "idleTimeout": {
                            "type": "integer",
                            "minimum": 1,
                            "example": 60
                        },
                        "port": {
                            "type": "string",
                            "example": "8080"
                        },
                        "proxyEnabled": {
                            "type": "boolean",
                            "example": false
                        },
                        "proxyURL": {
                            "type": "string",
                            "example": "http://proxy:8080"
                        },
                        "rateLimitEnabled": {
                            "type": "boolean",
                            "example": true
                        },
                        "readTimeout": {
                            "type": "integer",
                            "minimum": 1,
                            "example": 30
                        },
                        "requestsPerMin": {
                            "type": "integer",
                            "minimum": 0,
                            "example": 100
                        },
                        "sslCert": {
                            "type": "string",
                            "example": "/path/to/cert.pem"
                        },
                        "sslKey": {
                            "type": "string",
                            "example": "/path/to/key.pem"
                        },
                        "writeTimeout": {
                            "type": "integer",
                            "minimum": 1,
                            "example": 30
                        }
                    }
                },
                "integrations": {
                    "description": "Integrations contains all third-party service configurations",
                    "type": "object",
                    "properties": {
                        "emby": {
                            "$ref": "#/definitions/models.EmbyConfig"
                        },
                        "jellyfin": {
                            "$ref": "#/definitions/models.JellyfinConfig"
                        },
                        "navidrome": {
                            "$ref": "#/definitions/models.NavidromeConfig"
                        },
                        "plex": {
                            "$ref": "#/definitions/models.PlexConfig"
                        },
                        "spotify": {
                            "$ref": "#/definitions/models.SpotifyConfig"
                        },
                        "trakt": {
                            "$ref": "#/definitions/models.TraktConfig"
                        }
                    }
                },
                "spotdl": {
                    "description": "SpotDL contains Spotify download integration settings",
                    "type": "object",
                    "required": [
                        "concurrentDownloads",
                        "downloadDirectory",
                        "fileFormat",
                        "maxRetries",
                        "namingTemplate",
                        "qualityPreset"
                    ],
                    "properties": {
                        "concurrentDownloads": {
                            "type": "integer",
                            "minimum": 1,
                            "example": 2
                        },
                        "downloadDirectory": {
                            "type": "string",
                            "example": "./downloads"
                        },
                        "enabled": {
                            "type": "boolean",
                            "example": false
                        },
                        "fileFormat": {
                            "type": "string",
                            "enum": [
                                "mp3",
                                "flac"
                            ],
                            "example": "mp3"
                        },
                        "maxRetries": {
                            "type": "integer",
                            "minimum": 0,
                            "example": 3
                        },
                        "namingTemplate": {
                            "type": "string",
                            "example": "{artist} - {title}"
                        },
                        "notifyOnComplete": {
                            "type": "boolean",
                            "example": true
                        },
                        "qualityPreset": {
                            "type": "string",
                            "enum": [
                                "low",
                                "medium",
                                "high"
                            ],
                            "example": "high"
                        }
                    }
                },
                "sync": {
                    "description": "Sync contains synchronization settings",
                    "type": "object",
                    "required": [
                        "conflictStrategy",
                        "interval"
                    ],
                    "properties": {
                        "collections": {
                            "type": "object",
                            "required": [
                                "maxItems"
                            ],
                            "properties": {
                                "allowedTypes": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "series",
                                        "movies",
                                        "music"
                                    ]
                                },
                                "enableSync": {
                                    "type": "boolean",
                                    "example": true
                                },
                                "maxItems": {
                                    "type": "integer",
                                    "minimum": 1,
                                    "example": 5000
                                },
                                "syncInterval": {
                                    "type": "string",
                                    "example": "0 */12 * * *"
                                }
                            }
                        },
                        "conflictStrategy": {
                            "type": "string",
                            "enum": [
                                "overwrite",
                                "skip",
                                "merge"
                            ],
                            "example": "skip"
                        },
                        "enabled": {
                            "type": "boolean",
                            "example": true
                        },
                        "interval": {
                            "type": "string",
                            "example": "0 */12 * * *"
                        },
                        "playlists": {
                            "type": "object",
                            "required": [
                                "maxItems"
                            ],
                            "properties": {
                                "allowedTypes": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "music",
                                        "media"
                                    ]
                                },
                                "enableSync": {
                                    "type": "boolean",
                                    "example": true
                                },
                                "maxItems": {
                                    "type": "integer",
                                    "minimum": 1,
                                    "example": 1000
                                },
                                "syncInterval": {
                                    "type": "string",
                                    "example": "0 */6 * * *"
                                }
                            }
                        }
                    }
                }
            }
        },
        "models.EmbyConfig": {
            "description": "Emby media server configuration",
            "type": "object",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "example": "your-api-key"
                },
                "enabled": {
                    "type": "boolean",
                    "example": false
                },
                "host": {
                    "type": "string",
                    "example": "localhost"
                },
                "port": {
                    "type": "integer",
                    "example": 8096
                },
                "ssl": {
                    "type": "boolean",
                    "example": false
                },
                "username": {
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "error message"
                }
            }
        },
        "models.JellyfinConfig": {
            "description": "Jellyfin media server configuration",
            "type": "object",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "example": "your-api-key"
                },
                "enabled": {
                    "type": "boolean",
                    "example": false
                },
                "host": {
                    "type": "string",
                    "example": "localhost"
                },
                "port": {
                    "type": "integer",
                    "example": 8096
                },
                "ssl": {
                    "type": "boolean",
                    "example": false
                },
                "username": {
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "models.NavidromeConfig": {
            "description": "Navidrome music server configuration",
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "example": false
                },
                "host": {
                    "type": "string",
                    "example": "localhost"
                },
                "password": {
                    "type": "string",
                    "example": "your-password"
                },
                "port": {
                    "type": "integer",
                    "example": 4533
                },
                "ssl": {
                    "type": "boolean",
                    "example": false
                },
                "username": {
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "models.PlexConfig": {
            "description": "Plex media server configuration",
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "example": false
                },
                "host": {
                    "type": "string",
                    "example": "localhost"
                },
                "port": {
                    "type": "integer",
                    "example": 32400
                },
                "ssl": {
                    "type": "boolean",
                    "example": false
                },
                "token": {
                    "type": "string",
                    "example": "your-plex-token"
                }
            }
        },
        "models.SpotifyConfig": {
            "description": "Spotify configuration",
            "type": "object",
            "properties": {
                "clientId": {
                    "type": "string",
                    "example": "your-client-id"
                },
                "clientSecret": {
                    "type": "string",
                    "example": "your-client-secret"
                },
                "enabled": {
                    "type": "boolean",
                    "example": false
                },
                "redirectUri": {
                    "type": "string",
                    "example": "http://localhost:8080/callback"
                },
                "scopes": {
                    "type": "string",
                    "example": "user-library-read playlist-read-private"
                }
            }
        },
        "models.TraktConfig": {
            "description": "Trakt.tv configuration",
            "type": "object",
            "properties": {
                "clientId": {
                    "type": "string",
                    "example": "your-client-id"
                },
                "clientSecret": {
                    "type": "string",
                    "example": "your-client-secret"
                },
                "enabled": {
                    "type": "boolean",
                    "example": false
                },
                "redirectUri": {
                    "type": "string",
                    "example": "http://localhost:8080/callback"
                }
            }
        },
        "models.User": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2,
                    "example": "John Doe"
                },
                "password": {
                    "description": "omitempty will exclude it from JSON responses",
                    "type": "string",
                    "format": "password",
                    "minLength": 8,
                    "example": "strongpassword123"
                }
            }
        },
        "models.UserResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{"http"},
	Title:            "Listarr API",
	Description:      "API Server for Listarr application",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
