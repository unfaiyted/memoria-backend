basePath: /api/v1
definitions:
  models.APIResponse-models_PasteData:
    properties:
      data:
        $ref: '#/definitions/models.PasteData'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.APIResponse-models_PasteListData:
    properties:
      data:
        $ref: '#/definitions/models.PasteListData'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.APIResponse-uint64:
    properties:
      data:
        type: integer
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.CreatePasteRequest:
    properties:
      content:
        type: string
      editorType:
        enum:
        - code
        - text
        example: code
        type: string
      expiresAt:
        example: "2023-01-08T00:00:00Z"
        type: string
      password:
        example: mySecurePassword123
        type: string
      privacy:
        enum:
        - public
        - private
        - password
        type: string
      syntaxHighlight:
        type: string
      title:
        type: string
    required:
    - content
    - privacy
    - title
    type: object
  models.ErrorResponse:
    properties:
      details:
        additionalProperties: true
        type: object
      error:
        allOf:
        - $ref: '#/definitions/models.ErrorType'
        example: FAILED_CHECK
      message:
        example: This is a pretty message
        type: string
      request_id:
        type: string
      timestamp:
        type: string
    type: object
  models.ErrorType:
    enum:
    - FAILED_CHECK
    - UNAUTHORIZED
    - NOT_FOUND
    - BAD_REQUEST
    - INTERNAL_ERROR
    - FORBIDDEN
    - CONFLICT
    - VALIDATION_ERROR
    - RATE_LIMITED
    - TIMEOUT
    - SERVICE_UNAVAILABLE
    - UNPROCESSABLE_ENTITY
    type: string
    x-enum-varnames:
    - ErrorTypeFailedCheck
    - ErrorTypeUnauthorized
    - ErrorTypeNotFound
    - ErrorTypeBadRequest
    - ErrorTypeInternalError
    - ErrorTypeForbidden
    - ErrorTypeConflict
    - ErrorTypeValidation
    - ErrorTypeRateLimited
    - ErrorTypeTimeout
    - ErrorTypeServiceUnavailable
    - ErrorTypeUnprocessableEntity
  models.HealthResponse:
    properties:
      application:
        example: true
        type: boolean
      database:
        example: true
        type: boolean
      status:
        description: Overall status of the system
        enum:
        - up
        - down
        - degraded
        example: up
        type: string
    required:
    - application
    - database
    - status
    type: object
  models.Paste:
    description: A text snippet with formatting, expiration, and privacy settings
    properties:
      content:
        example: console.log('Hello world');
        type: string
      createdAt:
        example: "2023-01-01T00:00:00Z"
        type: string
      editorType:
        enum:
        - code
        - text
        example: code
        type: string
      expiresAt:
        example: "2023-01-08T00:00:00Z"
        type: string
      id:
        example: 123111
        type: integer
      privacy:
        description: '"public", "private"'
        enum:
        - public
        - private
        example: public
        type: string
      privateAccessId:
        example: abc123xyz456
        type: string
      syntaxHighlight:
        example: javascript
        type: string
      title:
        example: My Code Snippet
        type: string
      user_id:
        example: u98765zyxwv
        type: string
    required:
    - content
    - editorType
    - id
    - privacy
    - syntaxHighlight
    - title
    type: object
  models.PasteData:
    properties:
      paste:
        $ref: '#/definitions/models.Paste'
    type: object
  models.PasteListData:
    description: List of pastes response wrapper
    properties:
      count:
        type: integer
      pastes:
        items:
          $ref: '#/definitions/models.Paste'
        type: array
    type: object
  models.UpdatePasteRequest:
    properties:
      content:
        type: string
      editorType:
        type: string
      expiresAt:
        example: "2023-01-08T00:00:00Z"
        type: string
      id:
        type: integer
      password:
        example: mySecurePassword123
        type: string
      privacy:
        enum:
        - public
        - private
        - password
        type: string
      syntaxHighlight:
        type: string
      title:
        type: string
    required:
    - content
    - id
    - privacy
    - title
    type: object
  models.User:
    properties:
      email:
        example: john@example.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: John Doe
        maxLength: 100
        minLength: 2
        type: string
      password:
        description: omitempty will exclude it from JSON responses
        example: strongpassword123
        format: password
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  models.UserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API Server for Memoria application
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Memoria API
  version: "1.0"
paths:
  /health:
    get:
      description: returns JSON object with health statuses.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.HealthResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: checks app and database health
      tags:
      - health
  /paste:
    delete:
      consumes:
      - application/json
      description: delete a paste by ID
      parameters:
      - description: Paste ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse-uint64'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Deletes paste by ID
      tags:
      - pastes
    post:
      consumes:
      - application/json
      description: Creates a new paste
      parameters:
      - description: Paste data
        in: body
        name: paste
        required: true
        schema:
          $ref: '#/definitions/models.CreatePasteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success response with paste data
          schema:
            $ref: '#/definitions/models.APIResponse-models_PasteData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create paste
      tags:
      - pastes
    put:
      consumes:
      - application/json
      description: Update a pastes value
      parameters:
      - description: Updated paste data
        in: body
        name: paste
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePasteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success response with paste data
          schema:
            $ref: '#/definitions/models.APIResponse-models_PasteData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Paste not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update paste
      tags:
      - pastes
  /paste/{id}:
    get:
      description: Retrieve a paste by ID
      parameters:
      - description: Paste ID
        in: path
        name: id
        required: true
        type: integer
      - description: Password for protected pastes
        in: query
        name: pw
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success response with paste data
          schema:
            $ref: '#/definitions/models.APIResponse-models_PasteData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Pssword required or invalid password
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Paste not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Gets a specific paste
      tags:
      - pastes
  /paste/all:
    get:
      consumes:
      - application/json
      description: 'Returns a list of all the pastes. # TODO: pagination'
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success response with paste list data
          schema:
            $ref: '#/definitions/models.APIResponse-models_PasteListData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Lists out all the pastes
      tags:
      - pastes
  /paste/private/{accessId}:
    get:
      description: Retrieve a private paste by its private access ID
      parameters:
      - description: Private Access ID
        in: path
        name: accessId
        required: true
        type: string
      - description: Password for protected pastes
        in: query
        name: pw
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success response with paste data
          schema:
            $ref: '#/definitions/models.APIResponse-models_PasteData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Paste not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Gets a specific private paste using its private access ID
      tags:
      - pastes
  /users:
    get:
      consumes:
      - application/json
      description: Get all users in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: List users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user in the system
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a user's information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update a user
      tags:
      - users
schemes:
- http
swagger: "2.0"
